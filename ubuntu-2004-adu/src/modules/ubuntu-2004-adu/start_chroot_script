#!/usr/bin/env bash
# <Script Name>
# <Description what this module does>
# Written by <Author>
# GPL V3
########


# Source error handling, leave this in place
set -x
set -e

source /common.sh
install_cleanup_trap

echo "# Generate the customized boot.scr file that support Dual Copy update strategy."
pushd /filesystem/boot
mkimage -A arm -T script -O linux -d boot.cmd.in boot.scr
mkdir -p /filesystem/boot/firmware
cp boot.scr /filesystem/boot/firmware
popd

unpack /filesystem/home/pi /home/"${BASE_USER}" "${BASE_USER}"
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot

echo "This is an example module, install and set up what you need here!"
echo "$UBUNTU-2004-ADU_VAR"

echo "# Add packages.microsoft.com"
adu_setup=/tmp/adu-setup
mkdir -p $adu_setup
curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > $adu_setup/microsoft-prod.list
cp $adu_setup/microsoft-prod.list /etc/apt/sources.list.d/
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > $adu_setup/microsoft.gpg
cp $adu_setup/microsoft.gpg /etc/apt/trusted.gpg.d/
apt-get update

echo "# List available versions of Device Update Agent and dependencies "
apt-cache policy aziot-edge aziot-identity-service deviceupdate-agent deliveryoptimization-agent libdeliveryoptimization libcurl4-openssl-dev libssl1.1

echo "# Install the moby engine package (required by aziot-edge)"
apt -y install moby-engine

echo_green -e "\n Moby Engine installed successfully\n"

echo "# Install the Azure IoT Edge version 1.4.8-1 package"
apt -y install aziot-edge=1.4.8-1

echo_green -e "\n Azure IoT Edge 1.4.8-1 installed successfully\n"

echo "# Install the Delivery Optimization agent version 1.0.0 package"

check_install_pkgs libcurl4-openssl-dev libboost-filesystem1.71.0 libproxy1v5 tree

wget https://github.com/microsoft/do-client/releases/download/v1.0.0/ubuntu2004_arm64-packages.tar -O ubuntu2004_arm64-packages.tar
tar -xvzf ubuntu2004_arm64-packages.tar
rm ubuntu2004_arm64-packages.tar
dpkg -i deliveryoptimization-agent_1.0.0_arm64.deb
rm deliveryoptimization-agent_1.0.0_arm64.deb
dpkg -i libdeliveryoptimization_1.0.0_arm64.deb
rm libdeliveryoptimization_1.0.0_arm64.deb
dpkg -i libdeliveryoptimization-dev_1.0.0_arm64.deb
rm libdeliveryoptimization-dev_1.0.0_arm64.deb

echo_green -e "\nDelivery Optimization 1.0.0 packages installed successfully\n"

echo_green -e "# Installing the Device Update agent version 1.0.2 package"
apt -y install deviceupdate-agent=1.0.2

if [ "$ADU_OVERLAY_PATH" != "" ]; then
    echo "\n#\n# Update Device Update configuration, log, and data folders ownership...\n#\n"

    echo "\n#\n# Before\n#\n"
    tree -pug "/$ADU_OVERLAY_PATH"

    chown -R adu:adu "/$ADU_OVERLAY_PATH/etc/adu"
    chmod u=rwx,g=rx,o= "/$ADU_OVERLAY_PATH/etc/adu"
    chown -R adu:adu "/$ADU_OVERLAY_PATH/work/etc/adu"
    chmod u=rwx,g=rx,o= "/$ADU_OVERLAY_PATH/work/etc/adu"

    chown -R adu:adu "/$ADU_OVERLAY_PATH/var/lib/adu"
    chmod u=rwx,g=rwx,o= "/$ADU_OVERLAY_PATH/var/lib/adu"
    chown -R adu:adu "/$ADU_OVERLAY_PATH/work/var/lib/adu"
    chmod u=rwx,g=rwx,o= "/$ADU_OVERLAY_PATH/work/var/lib/adu"

    chown -R adu:adu "/$ADU_OVERLAY_PATH/var/log/adu"
    chmod u=rwx,g=rx "/$ADU_OVERLAY_PATH/var/log/adu"
    chown -R adu:adu "/$ADU_OVERLAY_PATH/work/var/log/adu"
    chmod u=rwx,g=rx "/$ADU_OVERLAY_PATH/work/var/log/adu"

    echo "\n#\n# After \n#\n"
    tree -pug "/$ADU_OVERLAY_PATH" 
fi

echo_green -e "\nDevice Update for IoT Hub 1.0.2 package installed successfully\n"

echo "# Install u-boot tools"
check_install_pkgs u-boot-tools

echo "# Configure Device Update persistent data parition"

# Update fstab data
echo "/dev/mmcblk0p4   /$ADU_OVERLAY_PATH    ext4    defaults,sync   0   0" >> /etc/fstab

# Unpack root at the end, so files are modified before
unpack /filesystem/root /

echo "# Install and enable the Device Update Run-Once systemd service... "
unpack /filesystem/usr/bin /usr/bin root
chmod 0744 /usr/bin/deviceupdate-run-once

unpack /filesystem/etc/systemd/system /etc/systemd/system root
chmod 664 /etc/systemd/system/deviceupdate-run-once.service
systemctl daemon-reload
systemctl enable deviceupdate-run-once.service

